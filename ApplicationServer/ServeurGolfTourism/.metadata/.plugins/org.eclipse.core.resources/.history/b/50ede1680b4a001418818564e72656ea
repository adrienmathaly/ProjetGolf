package http;

import java.io.File;
import java.io.IOException;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;
import com.sun.net.httpserver.HttpServer;
import configuration.ConfLoader;
import logger.Logger;


public class HTTPGolfServersLauncher {


	private boolean active;
	private HTTPResponseHeaderBuilder headers;
	private HashMap<String,Logger> loggers;
	
	public HTTPGolfServersLauncher() {
		ConfLoader.loadConfigFile();
		launchLoggers();
		loggers.get("Events").addLogToBeWritten(ConfLoader.getEntry("onStartMsg"));
		active=true;
		headers=new HTTPResponseHeaderBuilder(new File(ConfLoader.getEntry("headersDirectory")));
		HTTPGolfMobileServer mobileServer = new HTTPGolfMobileServer();
		HTTPGolfSupervisionServer supervisionServer = new HTTPGolfSupervisionServer();
	}
	
	private void launchLoggers(){
		loggers = new HashMap<String,Logger>();
		loggers.put(ConfLoader.getEntry("loggerEventsName"), new Logger(ConfLoader.getEntry("loggerEventsName"), ConfLoader.getEntry("loggerEventsPath"),10));
		loggers.put(ConfLoader.getEntry("loggerErrorsName"), new Logger(ConfLoader.getEntry("loggerErrorsName"), ConfLoader.getEntry("loggerErrorsPath"),10));
		for(Entry<String,Logger> e : loggers.entrySet()){
			Thread t = new Thread(e.getValue());
			t.start();
		}
	}
	
	private void killLoggers(){
		for(Entry<String,Logger> e : loggers.entrySet()){
			e.getValue().stopLogger();
		}
	}
}
