package http;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map.Entry;

import configuration.ConfLoader;
import logger.Logger;

public class HTTPGolfMobileServer {

	private ArrayList<CommunicationManager> communications;
	private boolean active;
	private HTTPResponseHeaderBuilder headers;
	private HashMap<String,Logger> loggers;
	
	public HTTPGolfMobileServer() {
		ConfLoader.loadConfigFile();
		launchLoggers();
		loggers.get("Events").addLogToBeWritten(ConfLoader.getEntry("onStartMsg"));
		active=true;
		headers=new HTTPResponseHeaderBuilder(new File(ConfLoader.getEntry("headersDirectory")));
		communications=new ArrayList<CommunicationManager>();
		try {
			int port = Integer.parseInt(ConfLoader.getEntry("serverPort"));
			ServerSocket serverSocket;
			serverSocket = new ServerSocket(port);
			while (active) {
				Socket clientSocket = serverSocket.accept();
				loggers.get("Events").addLogToBeWritten(ConfLoader.getEntry("onConnectMsg"));
				BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
				BufferedWriter out = new BufferedWriter(new OutputStreamWriter(clientSocket.getOutputStream()));
				String header="";
				while ((header = header+"\n"+in.readLine()) != null) {
					if (header.isEmpty()) {
						break;
					}
				}
				switch(analyzeClient(header)){
					case TypesOfConnection.MOBILE:launchMobileCommunication(clientSocket,in,out);
					case TypesOfConnection.SUPERVISION:launchSupervisionCommunication(clientSocket,in,out);
					default:rejectCommunication(clientSocket,in,out);			
				}
			}
			serverSocket.close();
			killLoggers();
		}catch (IOException e) {
			e.printStackTrace();
			loggers.get("Errors").addLogToBeWritten(e.getMessage());
		}
	}
	
	private int analyzeClient(String header){
		int type=0;
		if(header.contains("Origin:MOBILE")){
			type=TypesOfConnection.MOBILE;
		}else{
			if(header.contains("Origin:SUPERVISION")){
				type=TypesOfConnection.SUPERVISION;
			}
		}
		return type;
	}
	
	private void launchMobileCommunication(Socket clientSocket, BufferedReader in ,BufferedWriter out){
		MobileManager mm = new MobileManager(clientSocket,in ,out, loggers);
		communications.add(mm);
		Thread t = new Thread(mm);
		t.start();
	}
	
	private void launchSupervisionCommunication(Socket clientSocket, BufferedReader in ,BufferedWriter out){
		SupervisionManager sm = new SupervisionManager(clientSocket,in ,out, loggers);
		communications.add(sm);
		Thread t = new Thread(sm);
		t.start();
	}
	
	private void rejectCommunication(Socket clientSocket, BufferedReader in, BufferedWriter out){
		try{
			out.write(headers.getHeaderOf("405"));
			out.close();
			in.close();
			clientSocket.close();
		}catch(IOException e){
			e.printStackTrace();
			loggers.get("Errors").addLogToBeWritten(e.getMessage());
		}
	}
	
	private void launchLoggers(){
		loggers = new HashMap<String,Logger>();
		loggers.put(ConfLoader.getEntry("loggerEventsName"), new Logger(ConfLoader.getEntry("loggerEventsName"), ConfLoader.getEntry("loggerEventsPath"),10));
		loggers.put(ConfLoader.getEntry("loggerErrorsName"), new Logger(ConfLoader.getEntry("loggerErrorsName"), ConfLoader.getEntry("loggerErrorsPath"),10));
		for(Entry<String,Logger> e : loggers.entrySet()){
			e.getValue().startLogger();
		}
	}
	
	private void killLoggers(){
		for(Entry<String,Logger> e : loggers.entrySet()){
			e.getValue().stopLogger();
		}
	}
}
