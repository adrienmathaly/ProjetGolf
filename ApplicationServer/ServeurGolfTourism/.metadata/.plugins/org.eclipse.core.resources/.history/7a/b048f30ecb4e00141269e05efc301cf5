/**   \author Adrien ORTOLA */
package http;

import http.servers.HTTPGolfMobileServer;
import http.servers.HTTPGolfSupervisionServer;
import http.servers.HTTPResponseHeaderBuilder;
import http.users.SetOfUsers;
import configuration.ConfLoader;
import logger.Logger;

/**
 * \class HTTPGolfServersLauncher
 * \brief The purpose of this class is to prepare the running environment for the different HTTP servers and then launch them.
 * */
public class HTTPGolfServersLauncher {

	/** Specify if the servers are allowed to run or not */
	private boolean active;
	/** The HTTP server dedicated to the handling of mobile clients */
	private HTTPGolfMobileServer mobileServer;
	/** The HTTP server dedicated to the handling of web supervision clients */
	private HTTPGolfSupervisionServer supvServer;

	/** 
	 * \param 
	 * \return
	 * \brief Constructor. Prepares, launches and maintains active the HTTP servers. 
	 * */
	public HTTPGolfServersLauncher() {
		ConfLoader.loadConfigFile();/** Loading of the configuration file */
		launchLoggers();/** preparation and launch of the loggers */
		SetOfUsers.prepareUsers();/** initialization of the set of users */
		Logger.addLogToBeWritten("Events",ConfLoader.getEntry("onStartMsg"));/** logging a welcome message */
		active=true;/** set active the handling of the servers */
		//headers=new HTTPResponseHeaderBuilder(new File(ConfLoader.getEntry("headersDirectory")));/** preparation of the different headers */
		mobileServer = new HTTPGolfMobileServer("[MOBILE]", ConfLoader.getEntry("serverPortMobile"));/** initialization of the mobile server */
		mobileServer.launchMePlease();/** launch of the mobile server */
		supvServer = new HTTPGolfSupervisionServer("[SUPERVISION]", ConfLoader.getEntry("serverPortSupervision"));/** initialization of the supervision server */
		supvServer.launchMePlease();/** launch of the web supervision server */
		while(active){
			try {
				Thread.sleep(100);/** keep active */
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}
		/** end everything properly */
		killEverything();
	}
	
	/** 
	 * \param 
	 * \return
	 * \brief Ends every active entity of the running environment.
	 * */
	private void killEverything(){
		mobileServer.killMePlease();
		supvServer.killMePlease();
		Logger.addLogToBeWritten("Events",ConfLoader.getEntry("onStopMsg"));
		killLoggers();
	}
	
	/** 
	 * \param
	 * \return
	 * \brief Creates then launches each logger.
	 * */
	private void launchLoggers(){
		Logger.prepareLoggers();
		Logger.createLogger(new Logger(ConfLoader.getEntry("loggerEventsName"), ConfLoader.getEntry("loggerEventsPath"),10));
		Logger.createLogger(new Logger(ConfLoader.getEntry("loggerErrorsName"), ConfLoader.getEntry("loggerErrorsPath"),10));
		Logger.startAllLoggers();
	}
	
	/** 
	 * \param
	 * \return
	 * \brief End all the active loggers.
	 * */
	private void killLoggers(){
		Logger.killAllloggers();
	}
	
	/** 
	 * \param
	 * \return boolean
	 * \brief returns the activity state of the application
	 * */
	public boolean isActive() {
		return active;
	}

	/** 
	 * \param boolean active
	 * \return
	 * \brief Sets the activity state of the application
	 * */
	public void setActive(boolean active) {
		this.active = active;
	}
}
